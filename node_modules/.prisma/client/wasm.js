
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  passwordHash: 'passwordHash',
  referralCode: 'referralCode',
  referredBy: 'referredBy',
  accountStatus: 'accountStatus',
  userLevel: 'userLevel',
  totalReferrals: 'totalReferrals',
  pendingEarnings: 'pendingEarnings',
  availableBalance: 'availableBalance',
  totalEarned: 'totalEarned',
  totalWithdrawn: 'totalWithdrawn',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  amount: 'amount',
  status: 'status',
  description: 'description',
  mpesaTransactionCode: 'mpesaTransactionCode',
  metadata: 'metadata',
  createdAt: 'createdAt',
  confirmedAt: 'confirmedAt'
};

exports.Prisma.WithdrawalRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  mpesaNumber: 'mpesaNumber',
  status: 'status',
  adminId: 'adminId',
  mpesaTransactionCode: 'mpesaTransactionCode',
  rejectionReason: 'rejectionReason',
  requestedAt: 'requestedAt',
  processedAt: 'processedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.DailyTaskScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  shareReferral: 'shareReferral',
  dailyLogin: 'dailyLogin',
  watchVideos: 'watchVideos',
  inviteMember: 'inviteMember',
  completedTasksCount: 'completedTasksCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WeeklyChallengeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  weekStartDate: 'weekStartDate',
  refer5Members: 'refer5Members',
  complete10Tasks: 'complete10Tasks',
  promote3Products: 'promote3Products',
  refer5Progress: 'refer5Progress',
  complete10Progress: 'complete10Progress',
  promote3Progress: 'promote3Progress',
  rewardClaimed: 'rewardClaimed',
  rewardAmount: 'rewardAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  referredId: 'referredId',
  level: 'level',
  status: 'status',
  earningsStatus: 'earningsStatus',
  earningsAmount: 'earningsAmount',
  createdAt: 'createdAt',
  confirmedAt: 'confirmedAt'
};

exports.Prisma.AdminLogScalarFieldEnum = {
  id: 'id',
  date: 'date',
  newMembersActive: 'newMembersActive',
  newMembersInactive: 'newMembersInactive',
  totalIncome: 'totalIncome',
  referralPayoutsL1: 'referralPayoutsL1',
  referralPayoutsL2: 'referralPayoutsL2',
  referralPayoutsL3: 'referralPayoutsL3',
  commissionPayouts: 'commissionPayouts',
  adsPayouts: 'adsPayouts',
  wheelPayouts: 'wheelPayouts',
  weeklyBonusPayouts: 'weeklyBonusPayouts',
  academicWritingPayouts: 'academicWritingPayouts',
  dailyProfit: 'dailyProfit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyStatsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  month: 'month',
  year: 'year',
  totalUsers: 'totalUsers',
  activeUsers: 'activeUsers',
  totalRevenue: 'totalRevenue',
  totalPayouts: 'totalPayouts',
  totalProfit: 'totalProfit',
  totalReferrals: 'totalReferrals',
  conversionRate: 'conversionRate',
  dailyTasksCompleted: 'dailyTasksCompleted',
  weeklyTasksCompleted: 'weeklyTasksCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  commissionRate: 'commissionRate',
  basePrice: 'basePrice',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  saleAmount: 'saleAmount',
  commissionAmount: 'commissionAmount',
  commissionRate: 'commissionRate',
  customerInfo: 'customerInfo',
  isConfirmed: 'isConfirmed',
  saleDate: 'saleDate',
  confirmedAt: 'confirmedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AccountStatus = exports.$Enums.AccountStatus = {
  UNVERIFIED: 'UNVERIFIED',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.UserLevel = exports.$Enums.UserLevel = {
  SILVER: 'SILVER',
  BRONZE: 'BRONZE',
  GOLD: 'GOLD'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  ACCOUNT_ACTIVATION: 'ACCOUNT_ACTIVATION',
  WITHDRAW_TO_MPESA: 'WITHDRAW_TO_MPESA',
  LEVEL_1_REFERRAL_BONUS: 'LEVEL_1_REFERRAL_BONUS',
  LEVEL_2_REFERRAL_BONUS: 'LEVEL_2_REFERRAL_BONUS',
  LEVEL_3_REFERRAL_BONUS: 'LEVEL_3_REFERRAL_BONUS',
  WEEKLY_CHALLENGE_BONUS: 'WEEKLY_CHALLENGE_BONUS',
  ADS_VIEWING_BONUS: 'ADS_VIEWING_BONUS',
  WHEEL_SPIN_BONUS: 'WHEEL_SPIN_BONUS',
  COMMISSION_BONUS: 'COMMISSION_BONUS',
  ACADEMIC_WRITING_BONUS: 'ACADEMIC_WRITING_BONUS'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.WithdrawalStatus = exports.$Enums.WithdrawalStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED'
};

exports.ReferralStatus = exports.$Enums.ReferralStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.EarningsStatus = exports.$Enums.EarningsStatus = {
  PENDING: 'PENDING',
  AVAILABLE: 'AVAILABLE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Transaction: 'Transaction',
  WithdrawalRequest: 'WithdrawalRequest',
  DailyTask: 'DailyTask',
  WeeklyChallenge: 'WeeklyChallenge',
  Referral: 'Referral',
  AdminLog: 'AdminLog',
  CompanyStats: 'CompanyStats',
  Admin: 'Admin',
  Product: 'Product',
  Sale: 'Sale',
  SystemConfig: 'SystemConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
