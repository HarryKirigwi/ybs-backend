// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  UNVERIFIED
  ACTIVE
  SUSPENDED
}

enum UserLevel {
  SILVER
  BRONZE
  GOLD
}

enum TransactionType {
  ACCOUNT_ACTIVATION
  WITHDRAW_TO_MPESA
  LEVEL_1_REFERRAL_BONUS
  LEVEL_2_REFERRAL_BONUS
  LEVEL_3_REFERRAL_BONUS
  WEEKLY_CHALLENGE_BONUS
  ADS_VIEWING_BONUS
  WHEEL_SPIN_BONUS
  COMMISSION_BONUS
  ACADEMIC_WRITING_BONUS
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum ReferralStatus {
  ACTIVE
  INACTIVE
}

enum EarningsStatus {
  PENDING
  AVAILABLE
}

model User {
  id                String        @id @default(cuid())
  phoneNumber       String        @unique @map("phone_number")
  passwordHash      String        @map("password_hash")
  referralCode      String        @unique @map("referral_code")
  referredBy        String?       @map("referred_by")
  accountStatus     AccountStatus @default(UNVERIFIED) @map("account_status")
  userLevel         UserLevel     @default(SILVER) @map("user_level")
  
  // Phone verification fields
  phoneVerified     Boolean       @default(false) @map("phone_verified")
  phoneVerifiedAt   DateTime?     @map("phone_verified_at")
  
  // Financial fields
  totalReferrals    Int           @default(0) @map("total_referrals")
  pendingEarnings   Decimal       @default(0) @db.Decimal(10, 2) @map("pending_earnings")
  availableBalance  Decimal       @default(0) @db.Decimal(10, 2) @map("available_balance")
  totalEarned       Decimal       @default(0) @db.Decimal(10, 2) @map("total_earned")
  totalWithdrawn    Decimal       @default(0) @db.Decimal(10, 2) @map("total_withdrawn")
  
  // Profile information
  firstName         String?       @map("first_name")
  lastName          String?       @map("last_name")
  email             String?       @unique
  
  // Timestamps
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  lastLogin         DateTime?     @map("last_login")
  
  // Relations
  referrer          User?         @relation("UserReferrals", fields: [referredBy], references: [referralCode])
  referrals         User[]        @relation("UserReferrals")
  
  transactions      Transaction[]
  withdrawalRequests WithdrawalRequest[]
  dailyTasks        DailyTask[]
  weeklyChallenges  WeeklyChallenge[]
  referralRelations Referral[]    @relation("ReferrerUser")
  referredRelations Referral[]    @relation("ReferredUser")
  sales             Sale[]
  
  @@index([phoneNumber])
  @@index([referralCode])
  @@index([accountStatus])
  @@index([createdAt])
  @@map("users")
}

model Transaction {
  id                String            @id @default(cuid())
  userId            String            @map("user_id")
  type              TransactionType
  amount            Decimal           @db.Decimal(10, 2)
  status            TransactionStatus @default(PENDING)
  description       String?
  mpesaTransactionCode String?        @map("mpesa_transaction_code")
  
  // Metadata
  metadata          Json?             // For storing additional transaction details
  
  // Timestamps
  createdAt         DateTime          @default(now()) @map("created_at")
  confirmedAt       DateTime?         @map("confirmed_at")
  
  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("transactions")
}

model WithdrawalRequest {
  id                String           @id @default(cuid())
  userId            String           @map("user_id")
  amount            Decimal          @db.Decimal(10, 2)
  mpesaNumber       String           @map("mpesa_number")
  status            WithdrawalStatus @default(PENDING)
  
  // Admin processing
  adminId           String?          @map("admin_id")
  mpesaTransactionCode String?       @map("mpesa_transaction_code")
  rejectionReason   String?          @map("rejection_reason")
  
  // Timestamps
  requestedAt       DateTime         @default(now()) @map("requested_at")
  processedAt       DateTime?        @map("processed_at")
  resolvedAt        DateTime?        @map("resolved_at")
  
  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([requestedAt])
  @@map("withdrawal_requests")
}

model DailyTask {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  date              DateTime  @db.Date
  
  // Task completion status
  shareReferral     Boolean   @default(false) @map("share_referral")
  dailyLogin        Boolean   @default(false) @map("daily_login")
  watchVideos       Boolean   @default(false) @map("watch_videos")
  inviteMember      Boolean   @default(false) @map("invite_member")
  
  // Computed field
  completedTasksCount Int     @default(0) @map("completed_tasks_count")
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("daily_tasks")
}

model WeeklyChallenge {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  weekStartDate     DateTime  @db.Date @map("week_start_date")
  
  // Challenge completion status
  refer5Members     Boolean   @default(false) @map("refer_5_members")
  complete10Tasks   Boolean   @default(false) @map("complete_10_tasks")
  promote3Products  Boolean   @default(false) @map("promote_3_products")
  
  // Progress tracking
  refer5Progress    Int       @default(0) @map("refer_5_progress")
  complete10Progress Int      @default(0) @map("complete_10_progress")
  promote3Progress  Int       @default(0) @map("promote_3_progress")
  
  // Rewards
  rewardClaimed     Boolean   @default(false) @map("reward_claimed")
  rewardAmount      Decimal?  @db.Decimal(10, 2) @map("reward_amount")
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, weekStartDate])
  @@map("weekly_challenges")
}

model Referral {
  id                String         @id @default(cuid())
  referrerId        String         @map("referrer_id")
  referredId        String         @map("referred_id")
  level             Int            // 1, 2, or 3
  status            ReferralStatus @default(ACTIVE)
  earningsStatus    EarningsStatus @default(PENDING)
  earningsAmount    Decimal        @db.Decimal(10, 2) @map("earnings_amount")
  
  // Timestamps
  createdAt         DateTime       @default(now()) @map("created_at")
  confirmedAt       DateTime?      @map("confirmed_at")
  
  // Relations
  referrer          User           @relation("ReferrerUser", fields: [referrerId], references: [id], onDelete: Cascade)
  referred          User           @relation("ReferredUser", fields: [referredId], references: [id], onDelete: Cascade)
  
  @@unique([referrerId, referredId])
  @@index([referrerId])
  @@index([referredId])
  @@index([earningsStatus])
  @@map("referrals")
}

model AdminLog {
  id                String    @id @default(cuid())
  date              DateTime  @db.Date
  
  // New members count
  newMembersActive  Int       @default(0) @map("new_members_active")
  newMembersInactive Int      @default(0) @map("new_members_inactive")
  
  // Financial metrics
  totalIncome       Decimal   @default(0) @db.Decimal(12, 2) @map("total_income")
  referralPayoutsL1 Decimal   @default(0) @db.Decimal(12, 2) @map("referral_payouts_l1")
  referralPayoutsL2 Decimal   @default(0) @db.Decimal(12, 2) @map("referral_payouts_l2")
  referralPayoutsL3 Decimal   @default(0) @db.Decimal(12, 2) @map("referral_payouts_l3")
  commissionPayouts Decimal   @default(0) @db.Decimal(12, 2) @map("commission_payouts")
  adsPayouts        Decimal   @default(0) @db.Decimal(12, 2) @map("ads_payouts")
  wheelPayouts      Decimal   @default(0) @db.Decimal(12, 2) @map("wheel_payouts")
  weeklyBonusPayouts Decimal  @default(0) @db.Decimal(12, 2) @map("weekly_bonus_payouts")
  academicWritingPayouts Decimal @default(0) @db.Decimal(12, 2) @map("academic_writing_payouts")
  
  // Calculated profit
  dailyProfit       Decimal   @default(0) @db.Decimal(12, 2) @map("daily_profit")
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  @@unique([date])
  @@map("admin_logs")
}

model CompanyStats {
  id                String    @id @default(cuid())
  date              DateTime  @db.Date
  month             Int       // 1-12
  year              Int
  
  // Aggregated metrics
  totalUsers        Int       @default(0) @map("total_users")
  activeUsers       Int       @default(0) @map("active_users")
  totalRevenue      Decimal   @default(0) @db.Decimal(15, 2) @map("total_revenue")
  totalPayouts      Decimal   @default(0) @db.Decimal(15, 2) @map("total_payouts")
  totalProfit       Decimal   @default(0) @db.Decimal(15, 2) @map("total_profit")
  
  // Referral metrics
  totalReferrals    Int       @default(0) @map("total_referrals")
  conversionRate    Decimal   @default(0) @db.Decimal(5, 4) @map("conversion_rate") // Percentage as decimal
  
  // Task completion metrics
  dailyTasksCompleted Int     @default(0) @map("daily_tasks_completed")
  weeklyTasksCompleted Int    @default(0) @map("weekly_tasks_completed")
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  @@unique([date])
  @@map("company_stats")
}

// Admin users table (separate from regular users)
model Admin {
  id                String    @id @default(cuid())
  username          String    @unique
  email             String    @unique
  passwordHash      String    @map("password_hash")
  role              String    @default("admin") // admin, super_admin
  
  // Profile
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  
  // Status
  isActive          Boolean   @default(true) @map("is_active")
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  lastLogin         DateTime? @map("last_login")
  
  @@map("admins")
}

// Product promotion tracking
model Product {
  id                String    @id @default(cuid())
  name              String    @unique
  description       String?
  category          String    // blog_website, company_website, deriv_trading, etc.
  commissionRate    Decimal   @db.Decimal(5, 4) @map("commission_rate") // 0.07 for 7%
  basePrice         Decimal   @db.Decimal(10, 2) @map("base_price")
  
  isActive          Boolean   @default(true) @map("is_active")
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  // Relations
  sales             Sale[]
  
  @@map("products")
}

model Sale {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  productId         String    @map("product_id")
  
  saleAmount        Decimal   @db.Decimal(10, 2) @map("sale_amount")
  commissionAmount  Decimal   @db.Decimal(10, 2) @map("commission_amount")
  commissionRate    Decimal   @db.Decimal(5, 4) @map("commission_rate")
  
  // Sale details
  customerInfo      Json?     @map("customer_info") // Store customer details
  
  // Status
  isConfirmed       Boolean   @default(false) @map("is_confirmed")
  
  // Timestamps
  saleDate          DateTime  @default(now()) @map("sale_date")
  confirmedAt       DateTime? @map("confirmed_at")
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("sales")
}

// System configuration
model SystemConfig {
  id                String    @id @default(cuid())
  key               String    @unique
  value             String
  description       String?
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  
  @@map("system_config")
}